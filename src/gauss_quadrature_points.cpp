#include "gauss_quadrature_points.h"

#include <thread>
#include "define_float_type.h"

namespace smoke_simulation {
	quadrature_point_vector::quadrature_point_vector(){
		_quadtarure_position.resize(std::thread::hardware_concurrency());
//		_normal.resize(std::thread::hardware_concurrency());
//		_quadtarure_weight.resize(std::thread::hardware_concurrency());
		_weighted_area_normal.resize(std::thread::hardware_concurrency());
		_included_cell_index.resize(std::thread::hardware_concurrency());
	}

//	quadrature_point::quadrature_point(VEC3_TYPE position, VEC3_TYPE normal, MY_FLOAT_TYPE weight, Eigen::Vector3i included_cell_index): _quadtarure_position(position), _normal(normal), _quadtarure_weight(weight), _included_cell_index(included_cell_index){
//	}

	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::quadtarure_positions_1D_1point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.0, 0.0, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_1D::quadtarure_weights_1D_1point = std::vector<MY_FLOAT_TYPE>{
		1.0
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::quadtarure_positions_1D_3point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.0, 0.0, 0.0),
		VEC3_TYPE(-0.7745966692414834, 0.0, 0.0),
		VEC3_TYPE(0.7745966692414834, 0.0, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_1D::quadtarure_weights_1D_3point = std::vector<MY_FLOAT_TYPE>{
		0.8888888888888888 / 2.0,
		0.5555555555555556 / 2.0,
		0.5555555555555556 / 2.0
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::quadtarure_positions_1D_5point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.0, 0.0, 0.0),
		VEC3_TYPE(-0.5384693101056831, 0.0, 0.0),
		VEC3_TYPE(0.5384693101056831, 0.0, 0.0),
		VEC3_TYPE(-0.9061798459386640, 0.0, 0.0),
		VEC3_TYPE(0.9061798459386640, 0.0, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_1D::quadtarure_weights_1D_5point = std::vector<MY_FLOAT_TYPE>{
		0.5688888888888889 / 2.0,
		0.4786286704993665 / 2.0,
		0.4786286704993665 / 2.0,
		0.2369268850561891 / 2.0,
		0.2369268850561891 / 2.0
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::quadtarure_positions_1D_7point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.0, 0.0, 0.0),
		VEC3_TYPE(-0.4058451513773972, 0.0, 0.0),
		VEC3_TYPE(0.4058451513773972, 0.0, 0.0),
		VEC3_TYPE(-0.7415311855993945, 0.0, 0.0),
		VEC3_TYPE(0.7415311855993945, 0.0, 0.0),
		VEC3_TYPE(-0.9491079123427585, 0.0, 0.0),
		VEC3_TYPE(0.9491079123427585, 0.0, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_1D::quadtarure_weights_1D_7point = std::vector<MY_FLOAT_TYPE>{
		0.4179591836734694 / 2.0,
		0.3818300505051189 / 2.0,
		0.3818300505051189 / 2.0,
		0.2797053914892766 / 2.0,
		0.2797053914892766 / 2.0,
		0.1294849661688697 / 2.0,
		0.1294849661688697 / 2.0
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::quadtarure_positions_1D_9point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.0, 0.0, 0.0),
		VEC3_TYPE(-0.8360311073266358, 0.0, 0.0),
		VEC3_TYPE(0.8360311073266358, 0.0, 0.0),
		VEC3_TYPE(-0.9681602395076261, 0.0, 0.0),
		VEC3_TYPE(0.9681602395076261, 0.0, 0.0),
		VEC3_TYPE(-0.3242534234038089, 0.0, 0.0),
		VEC3_TYPE(0.3242534234038089, 0.0, 0.0),
		VEC3_TYPE(-0.6133714327005904, 0.0, 0.0),
		VEC3_TYPE(0.6133714327005904, 0.0, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_1D::quadtarure_weights_1D_9point = std::vector<MY_FLOAT_TYPE>{
		0.3302393550012598 / 2.0,
		0.1806481606948574 / 2.0,
		0.1806481606948574 / 2.0,
		0.0812743883615744 / 2.0,
		0.0812743883615744 / 2.0,
		0.3123470770400029 / 2.0,
		0.3123470770400029 / 2.0,
		0.2606106964029354 / 2.0,
		0.2606106964029354 / 2.0
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::quadtarure_positions_1D_11point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.0, 0.0, 0.0),
		VEC3_TYPE(-0.2695431559523450, 0.0, 0.0),
		VEC3_TYPE(0.2695431559523450, 0.0, 0.0),
		VEC3_TYPE(-0.5190961292068118, 0.0, 0.0),
		VEC3_TYPE(0.5190961292068118, 0.0, 0.0),
		VEC3_TYPE(-0.7301520055740494, 0.0, 0.0),
		VEC3_TYPE(0.7301520055740494, 0.0, 0.0),
		VEC3_TYPE(-0.8870625997680953, 0.0, 0.0),
		VEC3_TYPE(0.8870625997680953, 0.0, 0.0),
		VEC3_TYPE(0.9782286581460570, 0.0, 0.0),
		VEC3_TYPE(-0.9782286581460570, 0.0, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_1D::quadtarure_weights_1D_11point = std::vector<MY_FLOAT_TYPE>{
		0.2729250867779006 / 2.0,
		0.2628045445102467 / 2.0,
		0.2628045445102467 / 2.0,
		0.2331937645919905 / 2.0,
		0.2331937645919905 / 2.0,
		0.1862902109277343 / 2.0,
		0.1862902109277343 / 2.0,
		0.1255803694649046 / 2.0,
		0.1255803694649046 / 2.0,
		0.0556685671161737 / 2.0,
		0.0556685671161737 / 2.0
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::quadtarure_positions_1D_13point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.0, 0.0, 0.0),
		VEC3_TYPE(-0.2304583159551348, 0.0, 0.0),
		VEC3_TYPE(0.2304583159551348, 0.0, 0.0),
		VEC3_TYPE(-0.4484927510364469, 0.0, 0.0),
		VEC3_TYPE(0.4484927510364469, 0.0, 0.0),
		VEC3_TYPE(-0.6423493394403402, 0.0, 0.0),
		VEC3_TYPE(0.6423493394403402, 0.0, 0.0),
		VEC3_TYPE(-0.8015780907333099, 0.0, 0.0),
		VEC3_TYPE(0.8015780907333099, 0.0, 0.0),
		VEC3_TYPE(-0.9175983992229779, 0.0, 0.0),
		VEC3_TYPE(0.9175983992229779, 0.0, 0.0),
		VEC3_TYPE(-0.9841830547185881, 0.0, 0.0),
		VEC3_TYPE(0.9841830547185881, 0.0, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_1D::quadtarure_weights_1D_13point = std::vector<MY_FLOAT_TYPE>{
		0.2325515532308739 / 2.0,
		0.2262831802628972 / 2.0,
		0.2262831802628972 / 2.0,
		0.2078160475368885 / 2.0,
		0.2078160475368885 / 2.0,
		0.1781459807619457 / 2.0,
		0.1781459807619457 / 2.0,
		0.1388735102197872 / 2.0,
		0.1388735102197872 / 2.0,
		0.0921214998377285 / 2.0,
		0.0921214998377285 / 2.0,
		0.0404840047653159 / 2.0,
		0.0404840047653159 / 2.0
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::quadtarure_positions_1D_25point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.0, 0.0, 0.0),
		VEC3_TYPE(-0.1228646926107104, 0.0, 0.0),
		VEC3_TYPE(0.1228646926107104, 0.0, 0.0),
		VEC3_TYPE(-0.2438668837209884, 0.0, 0.0),
		VEC3_TYPE(0.2438668837209884, 0.0, 0.0),
		VEC3_TYPE(-0.3611723058093879, 0.0, 0.0),
		VEC3_TYPE(0.3611723058093879, 0.0, 0.0),
		VEC3_TYPE(-0.4730027314457150, 0.0, 0.0),
		VEC3_TYPE(0.4730027314457150, 0.0, 0.0),
		VEC3_TYPE(-0.5776629302412229, 0.0, 0.0),
		VEC3_TYPE(0.5776629302412229, 0.0, 0.0),
		VEC3_TYPE(-0.6735663684734684, 0.0, 0.0),
		VEC3_TYPE(0.6735663684734684, 0.0, 0.0),
		VEC3_TYPE(-0.7592592630373576, 0.0, 0.0),
		VEC3_TYPE(0.7592592630373576, 0.0, 0.0),
		VEC3_TYPE(-0.8334426287608340, 0.0, 0.0),
		VEC3_TYPE(0.8334426287608340, 0.0, 0.0),
		VEC3_TYPE(-0.8949919978782753, 0.0, 0.0),
		VEC3_TYPE(0.8949919978782753, 0.0, 0.0),
		VEC3_TYPE(-0.9429745712289743, 0.0, 0.0),
		VEC3_TYPE(0.9429745712289743, 0.0, 0.0),
		VEC3_TYPE(-0.9766639214595175, 0.0, 0.0),
		VEC3_TYPE(0.9766639214595175, 0.0, 0.0),
		VEC3_TYPE(-0.9955569697904981, 0.0, 0.0),
		VEC3_TYPE(0.9955569697904981, 0.0, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_1D::quadtarure_weights_1D_25point = std::vector<MY_FLOAT_TYPE>{
		0.1231760537267154 / 2.0,
		0.1222424429903100 / 2.0,
		0.1222424429903100 / 2.0,
		0.1194557635357848 / 2.0,
		0.1194557635357848 / 2.0,
		0.1148582591457116 / 2.0,
		0.1148582591457116 / 2.0,
		0.1085196244742637 / 2.0,
		0.1085196244742637 / 2.0,
		0.1005359490670506 / 2.0,
		0.1005359490670506 / 2.0,
		0.0910282619829637 / 2.0,
		0.0910282619829637 / 2.0,
		0.0801407003350010 / 2.0,
		0.0801407003350010 / 2.0,
		0.0680383338123569 / 2.0,
		0.0680383338123569 / 2.0,
		0.0549046959758352 / 2.0,
		0.0549046959758352 / 2.0,
		0.0409391567013063 / 2.0,
		0.0409391567013063 / 2.0,
		0.0263549866150321 / 2.0,
		0.0263549866150321 / 2.0,
		0.0113937985010263 / 2.0,
		0.0113937985010263 / 2.0
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::quadtarure_positions_1D_49point = std::vector<VEC3_TYPE>{
	VEC3_TYPE(0.0000000000000000, 0.0, 0.0),
	VEC3_TYPE(- 0.0634206849826868, 0.0, 0.0),
	VEC3_TYPE(0.0634206849826868, 0.0, 0.0),
	VEC3_TYPE(- 0.1265859972696720, 0.0, 0.0),
	VEC3_TYPE(0.1265859972696720, 0.0, 0.0),
	VEC3_TYPE(- 0.1892415924618136, 0.0, 0.0),
	VEC3_TYPE(0.1892415924618136, 0.0, 0.0),
	VEC3_TYPE(- 0.2511351786125773, 0.0, 0.0),
	VEC3_TYPE(0.2511351786125773, 0.0, 0.0),
	VEC3_TYPE(- 0.3120175321197488, 0.0, 0.0),
	VEC3_TYPE(0.3120175321197488, 0.0, 0.0),
	VEC3_TYPE(- 0.3716435012622849, 0.0, 0.0),
	VEC3_TYPE(0.3716435012622849, 0.0, 0.0),
	VEC3_TYPE(- 0.4297729933415765, 0.0, 0.0),
	VEC3_TYPE(0.4297729933415765, 0.0, 0.0),
	VEC3_TYPE(- 0.4861719414524920, 0.0, 0.0),
	VEC3_TYPE(0.4861719414524920, 0.0, 0.0),
	VEC3_TYPE(- 0.5406132469917261, 0.0, 0.0),
	VEC3_TYPE(0.5406132469917261, 0.0, 0.0),
	VEC3_TYPE(- 0.5928776941089007, 0.0, 0.0),
	VEC3_TYPE(0.5928776941089007, 0.0, 0.0),
	VEC3_TYPE(- 0.6427548324192377, 0.0, 0.0),
	VEC3_TYPE(0.6427548324192377, 0.0, 0.0),
	VEC3_TYPE(- 0.6900438244251321, 0.0, 0.0),
	VEC3_TYPE(0.6900438244251321, 0.0, 0.0),
	VEC3_TYPE(- 0.7345542542374027, 0.0, 0.0),
	VEC3_TYPE(0.7345542542374027, 0.0, 0.0),
	VEC3_TYPE(- 0.7761068943454467, 0.0, 0.0),
	VEC3_TYPE(0.7761068943454467, 0.0, 0.0),
	VEC3_TYPE(- 0.8145344273598555, 0.0, 0.0),
	VEC3_TYPE(0.8145344273598555, 0.0, 0.0),
	VEC3_TYPE(- 0.8496821198441658, 0.0, 0.0),
	VEC3_TYPE(0.8496821198441658, 0.0, 0.0),
	VEC3_TYPE(- 0.8814084455730089, 0.0, 0.0),
	VEC3_TYPE(0.8814084455730089, 0.0, 0.0),
	VEC3_TYPE(- 0.9095856558280733, 0.0, 0.0),
	VEC3_TYPE(0.9095856558280733, 0.0, 0.0),
	VEC3_TYPE(- 0.9341002947558101, 0.0, 0.0),
	VEC3_TYPE(0.9341002947558101, 0.0, 0.0),
	VEC3_TYPE(- 0.9548536586741372, 0.0, 0.0),
	VEC3_TYPE(0.9548536586741372, 0.0, 0.0),
	VEC3_TYPE(- 0.9717622009015554, 0.0, 0.0),
	VEC3_TYPE(0.9717622009015554, 0.0, 0.0),
	VEC3_TYPE(- 0.9847578959142130, 0.0, 0.0),
	VEC3_TYPE(0.9847578959142130, 0.0, 0.0),
	VEC3_TYPE(- 0.9937886619441678, 0.0, 0.0),
	VEC3_TYPE(0.9937886619441678, 0.0, 0.0),
	VEC3_TYPE(-0.9988201506066354, 0.0, 0.0),
	VEC3_TYPE(0.9988201506066354, 0.0, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_1D::quadtarure_weights_1D_49point = std::vector<MY_FLOAT_TYPE>{
		0.0634632814047906 / 2.0,
		0.0633355092964917 / 2.0,
		0.0633355092964917 / 2.0,
		0.0629527074651957 / 2.0,
		0.0629527074651957 / 2.0,
		0.0623164173200573 / 2.0,
		0.0623164173200573 / 2.0,
		0.0614292009791929 / 2.0,
		0.0614292009791929 / 2.0,
		0.0602946309531520 / 2.0,
		0.0602946309531520 / 2.0,
		0.0589172757600273 / 2.0,
		0.0589172757600273 / 2.0,
		0.0573026815301875 / 2.0,
		0.0573026815301875 / 2.0,
		0.0554573496748036 / 2.0,
		0.0554573496748036 / 2.0,
		0.0533887107082590 / 2.0,
		0.0533887107082590 / 2.0,
		0.0511050943301446 / 2.0,
		0.0511050943301446 / 2.0,
		0.0486156958878282 / 2.0,
		0.0486156958878282 / 2.0,
		0.0459305393555959 / 2.0,
		0.0459305393555959 / 2.0,
		0.0430604369812596 / 2.0,
		0.0430604369812596 / 2.0,
		0.0400169457663730 / 2.0,
		0.0400169457663730 / 2.0,
		0.0368123209630007 / 2.0,
		0.0368123209630007 / 2.0,
		0.0334594667916222 / 2.0,
		0.0334594667916222 / 2.0,
		0.0299718846205838 / 2.0,
		0.0299718846205838 / 2.0,
		0.0263636189270660 / 2.0,
		0.0263636189270660 / 2.0,
		0.0226492015874467 / 2.0,
		0.0226492015874467 / 2.0,
		0.0188435958530895 / 2.0,
		0.0188435958530895 / 2.0,
		0.0149621449356247 / 2.0,
		0.0149621449356247 / 2.0,
		0.0110205510315936 / 2.0,
		0.0110205510315936 / 2.0,
		0.0070350995900865 / 2.0,
		0.0070350995900865 / 2.0,
		0.0030272789889229 / 2.0,
		0.0030272789889229 / 2.0
	};


	gauss_quadrature_points_1D::gauss_quadrature_points_1D() {

	}

	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::get_quadtarure_positions_1D(const int num_quadrature_points) {
		if (num_quadrature_points == 1) {
			return quadtarure_positions_1D_1point;
		}
		else if (num_quadrature_points == 3) {
			return quadtarure_positions_1D_3point;
		}
		else if (num_quadrature_points == 5) {
			return quadtarure_positions_1D_5point;
		}
		else if (num_quadrature_points == 7) {
			return quadtarure_positions_1D_7point;
		}
		else if (num_quadrature_points == 9) {
			return quadtarure_positions_1D_9point;
		}
		else if (num_quadrature_points == 11) {
			return quadtarure_positions_1D_11point;
		}
		else if (num_quadrature_points == 13) {
			return quadtarure_positions_1D_13point;
		}
		else if (num_quadrature_points == 25) {
			return quadtarure_positions_1D_25point;
		}
		else if (num_quadrature_points == 49) {
			return quadtarure_positions_1D_49point;
		}
	}

	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_1D::get_quadtarure_weights_1D(const int num_quadrature_points) {
		if (num_quadrature_points == 1) {
			return quadtarure_weights_1D_1point;
		}
		else if (num_quadrature_points == 3) {
			return quadtarure_weights_1D_3point;
		}
		else if (num_quadrature_points == 5) {
			return quadtarure_weights_1D_5point;
		}
		else if (num_quadrature_points == 7) {
			return quadtarure_weights_1D_7point;
		}
		else if (num_quadrature_points == 9) {
			return quadtarure_weights_1D_9point;
		}
		else if (num_quadrature_points == 11) {
			return quadtarure_weights_1D_11point;
		}
		else if (num_quadrature_points == 13) {
			return quadtarure_weights_1D_13point;
		}
		else if (num_quadrature_points == 25) {
			return quadtarure_weights_1D_25point;
		}
		else if (num_quadrature_points == 49) {
			return quadtarure_weights_1D_49point;
		}
	}
	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::calc_quadtarure_positions_on_cell_face(const cell_face face, const int num_quadrature_points) {
		std::vector<VEC3_TYPE> quadtarure_positions_on_1D_line = get_quadtarure_positions_1D(num_quadrature_points);
		////// cell face 上での求積点の位置を計算していく
		// cell face の中心
		VEC3_TYPE cell_face_center = face.calc_face_center();
		// cell face の向き
		VEC3_TYPE edge_direction = (face._vertex_list[1]._vertex_pos - face._vertex_list[0]._vertex_pos).normalized();
		// cell face の長さ
		MY_FLOAT_TYPE cell_area = face.calc_face_area();
		//結果を格納する変数
		std::vector<VEC3_TYPE> quadtarure_positions_on_cell_face;
		for (int i_quad = 0; i_quad < num_quadrature_points; ++i_quad) {
			quadtarure_positions_on_cell_face.push_back(cell_face_center + cell_area * (quadtarure_positions_on_1D_line[i_quad][0] / 2.0) * edge_direction);
		}
		return quadtarure_positions_on_cell_face;
	}

	const std::vector<VEC3_TYPE> gauss_quadrature_points_1D::get_quadtarure_positions_on_1D_interval(
		const MY_FLOAT_TYPE begin_of_interval,
		const MY_FLOAT_TYPE end_of_interval,
		const int num_quadrature_points){
		// reference interval での求積点のリスト
		std::vector<VEC3_TYPE> quadtarure_positions_on_1D_refenrence_interval;
		if (num_quadrature_points == 1) {
			quadtarure_positions_on_1D_refenrence_interval = quadtarure_positions_1D_1point;
		}
		else if (num_quadrature_points == 3) {
			quadtarure_positions_on_1D_refenrence_interval = quadtarure_positions_1D_3point;
		}
		else if (num_quadrature_points == 5) {
			quadtarure_positions_on_1D_refenrence_interval = quadtarure_positions_1D_5point;
		}
		else if (num_quadrature_points == 7) {
			quadtarure_positions_on_1D_refenrence_interval = quadtarure_positions_1D_7point;
		}
		else if (num_quadrature_points == 9) {
			quadtarure_positions_on_1D_refenrence_interval = quadtarure_positions_1D_9point;
		}
		else if (num_quadrature_points == 11) {
			quadtarure_positions_on_1D_refenrence_interval = quadtarure_positions_1D_11point;
		}
		else if (num_quadrature_points == 13) {
			quadtarure_positions_on_1D_refenrence_interval = quadtarure_positions_1D_13point;
		}
		else if (num_quadrature_points == 25) {
			quadtarure_positions_on_1D_refenrence_interval = quadtarure_positions_1D_25point;
		}
		else if (num_quadrature_points == 49) {
			quadtarure_positions_on_1D_refenrence_interval = quadtarure_positions_1D_49point;
		}
		// reference interval での求積点のリストからinterval での求積点を計算
		const int num_points = quadtarure_positions_on_1D_refenrence_interval.size();
		// 結果を格納する変数
		std::vector<VEC3_TYPE> quadtarure_positions_on_1D_interval(num_points);
		MY_FLOAT_TYPE interval_length = end_of_interval - begin_of_interval;
		for(int i_point = 0; i_point < num_points; ++i_point){
			quadtarure_positions_on_1D_interval[i_point][0]
				= (interval_length / 2.0) * quadtarure_positions_on_1D_refenrence_interval[i_point][0]
				+ (interval_length / 2.0)
				+ begin_of_interval;
			quadtarure_positions_on_1D_interval[i_point][1]
				= 0.0;
			quadtarure_positions_on_1D_interval[i_point][2]
				= 0.0;
		}
		return quadtarure_positions_on_1D_interval;
	}


	//二次元ガウス求積
	//
	const std::vector<VEC3_TYPE> gauss_quadrature_points_2D::quadtarure_positions_2D_1point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.5, 0.5, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_2D::quadtarure_weights_2D_1point = std::vector<MY_FLOAT_TYPE>{
		1.0
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_2D::quadtarure_positions_2D_4point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.211325, 0.211325, 0.0),
		VEC3_TYPE(0.211325, 0.788675, 0.0),
		VEC3_TYPE(0.788675, 0.211325, 0.0),
		VEC3_TYPE(0.788675, 0.788675, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_2D::quadtarure_weights_2D_4point = std::vector<MY_FLOAT_TYPE>{
		0.25,
		0.25,
		0.25,
		0.25
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_2D::quadtarure_positions_2D_9point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.5, 0.5, 0.0),
		VEC3_TYPE(0.5, 0.112702, 0.0),
		VEC3_TYPE(0.5, 0.887298, 0.0),
		VEC3_TYPE(0.112702, 0.5, 0.0),
		VEC3_TYPE(0.112702, 0.112702, 0.0),
		VEC3_TYPE(0.112702, 0.887298, 0.0),
		VEC3_TYPE(0.887298, 0.5, 0.0),
		VEC3_TYPE(0.887298, 0.112702, 0.0),
		VEC3_TYPE(0.887298, 0.887298, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_2D::quadtarure_weights_2D_9point = std::vector<MY_FLOAT_TYPE>{
		0.197531,
		0.123457,
		0.123457,
		0.123457,
		0.0771605,
		0.0771605,
		0.123457,
		0.0771605,
		0.0771605
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_2D::quadtarure_positions_2D_16point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.330009, 0.330009, 0.0),
		VEC3_TYPE(0.330009, 0.669991, 0.0),
		VEC3_TYPE(0.330009, 0.0694318, 0.0),
		VEC3_TYPE(0.330009, 0.930568, 0.0),
		VEC3_TYPE(0.669991, 0.330009, 0.0),
		VEC3_TYPE(0.669991, 0.669991, 0.0),
		VEC3_TYPE(0.669991, 0.0694318, 0.0),
		VEC3_TYPE(0.669991, 0.930568, 0.0),
		VEC3_TYPE(0.0694318, 0.330009, 0.0),
		VEC3_TYPE(0.0694318, 0.669991, 0.0),
		VEC3_TYPE(0.0694318, 0.0694318, 0.0),
		VEC3_TYPE(0.0694318, 0.930568, 0.0),
		VEC3_TYPE(0.930568, 0.330009, 0.0),
		VEC3_TYPE(0.930568, 0.669991, 0.0),
		VEC3_TYPE(0.930568, 0.0694318, 0.0),
		VEC3_TYPE(0.930568, 0.930568, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_2D::quadtarure_weights_2D_16point = std::vector<MY_FLOAT_TYPE>{
		0.106323,
		0.106323,
		0.056713,
		0.056713,
		0.106323,
		0.106323,
		0.056713,
		0.056713,
		0.056713,
		0.056713,
		0.0302508,
		0.0302508,
		0.056713,
		0.056713,
		0.0302508,
		0.0302508
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_2D::quadtarure_positions_2D_25point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.5, 0.5, 0.0),
		VEC3_TYPE(0.5, 0.230765, 0.0),
		VEC3_TYPE(0.5, 0.769235, 0.0),
		VEC3_TYPE(0.5, 0.0469101, 0.0),
		VEC3_TYPE(0.5, 0.95309, 0.0),
		VEC3_TYPE(0.230765, 0.5, 0.0),
		VEC3_TYPE(0.230765, 0.230765, 0.0),
		VEC3_TYPE(0.230765, 0.769235, 0.0),
		VEC3_TYPE(0.230765, 0.0469101, 0.0),
		VEC3_TYPE(0.230765, 0.95309, 0.0),
		VEC3_TYPE(0.769235, 0.5, 0.0),
		VEC3_TYPE(0.769235, 0.230765, 0.0),
		VEC3_TYPE(0.769235, 0.769235, 0.0),
		VEC3_TYPE(0.769235, 0.0469101, 0.0),
		VEC3_TYPE(0.769235, 0.95309, 0.0),
		VEC3_TYPE(0.0469101, 0.5, 0.0),
		VEC3_TYPE(0.0469101, 0.230765, 0.0),
		VEC3_TYPE(0.0469101, 0.769235, 0.0),
		VEC3_TYPE(0.0469101, 0.0469101, 0.0),
		VEC3_TYPE(0.0469101, 0.95309, 0.0),
		VEC3_TYPE(0.95309, 0.5, 0.0),
		VEC3_TYPE(0.95309, 0.230765, 0.0),
		VEC3_TYPE(0.95309, 0.769235, 0.0),
		VEC3_TYPE(0.95309, 0.0469101, 0.0),
		VEC3_TYPE(0.95309, 0.95309, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_2D::quadtarure_weights_2D_25point = std::vector<MY_FLOAT_TYPE>{
		0.0809086,
		0.0680716,
		0.0680716,
		0.0336963,
		0.0336963,
		0.0680716,
		0.0572714,
		0.0572714,
		0.02835,
		0.02835,
		0.0680716,
		0.0572714,
		0.0572714,
		0.02835,
		0.02835,
		0.0336963,
		0.02835,
		0.02835,
		0.0140336,
		0.0140336,
		0.0336963,
		0.02835,
		0.02835,
		0.0140336,
		0.0140336
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_2D::quadtarure_positions_2D_36point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.830605, 0.830605, 0.0),
		VEC3_TYPE(0.830605, 0.169395, 0.0),
		VEC3_TYPE(0.830605, 0.61931, 0.0),
		VEC3_TYPE(0.830605, 0.38069, 0.0),
		VEC3_TYPE(0.830605, 0.966235, 0.0),
		VEC3_TYPE(0.830605, 0.0337653, 0.0),
		VEC3_TYPE(0.169395, 0.830605, 0.0),
		VEC3_TYPE(0.169395, 0.169395, 0.0),
		VEC3_TYPE(0.169395, 0.61931, 0.0),
		VEC3_TYPE(0.169395, 0.38069, 0.0),
		VEC3_TYPE(0.169395, 0.966235, 0.0),
		VEC3_TYPE(0.169395, 0.0337653, 0.0),
		VEC3_TYPE(0.61931, 0.830605, 0.0),
		VEC3_TYPE(0.61931, 0.169395, 0.0),
		VEC3_TYPE(0.61931, 0.61931, 0.0),
		VEC3_TYPE(0.61931, 0.38069, 0.0),
		VEC3_TYPE(0.61931, 0.966235, 0.0),
		VEC3_TYPE(0.61931, 0.0337653, 0.0),
		VEC3_TYPE(0.38069, 0.830605, 0.0),
		VEC3_TYPE(0.38069, 0.169395, 0.0),
		VEC3_TYPE(0.38069, 0.61931, 0.0),
		VEC3_TYPE(0.38069, 0.38069, 0.0),
		VEC3_TYPE(0.38069, 0.966235, 0.0),
		VEC3_TYPE(0.38069, 0.0337653, 0.0),
		VEC3_TYPE(0.966235, 0.830605, 0.0),
		VEC3_TYPE(0.966235, 0.169395, 0.0),
		VEC3_TYPE(0.966235, 0.61931, 0.0),
		VEC3_TYPE(0.966235, 0.38069, 0.0),
		VEC3_TYPE(0.966235, 0.966235, 0.0),
		VEC3_TYPE(0.966235, 0.0337653, 0.0),
		VEC3_TYPE(0.0337653, 0.830605, 0.0),
		VEC3_TYPE(0.0337653, 0.169395, 0.0),
		VEC3_TYPE(0.0337653, 0.61931, 0.0),
		VEC3_TYPE(0.0337653, 0.38069, 0.0),
		VEC3_TYPE(0.0337653, 0.966235, 0.0),
		VEC3_TYPE(0.0337653, 0.0337653, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_2D::quadtarure_weights_2D_36point = std::vector<MY_FLOAT_TYPE>{
		0.0325372,
		0.0325372,
		0.0422013,
		0.0422013,
		0.0154518,
		0.0154518,
		0.0325372,
		0.0325372,
		0.0422013,
		0.0422013,
		0.0154518,
		0.0154518,
		0.0422013,
		0.0422013,
		0.0547359,
		0.0547359,
		0.0200413,
		0.0200413,
		0.0422013,
		0.0422013,
		0.0547359,
		0.0547359,
		0.0200413,
		0.0200413,
		0.0154518,
		0.0154518,
		0.0200413,
		0.0200413,
		0.00733802,
		0.00733802,
		0.0154518,
		0.0154518,
		0.0200413,
		0.0200413,
		0.00733802,
		0.00733802,
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_2D::quadtarure_positions_2D_49point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.5, 0.5, 0.0),
		VEC3_TYPE(0.5, 0.702923, 0.0),
		VEC3_TYPE(0.5, 0.297077, 0.0),
		VEC3_TYPE(0.5, 0.870766, 0.0),
		VEC3_TYPE(0.5, 0.129234, 0.0),
		VEC3_TYPE(0.5, 0.974554, 0.0),
		VEC3_TYPE(0.5, 0.0254461, 0.0),
		VEC3_TYPE(0.702923, 0.5, 0.0),
		VEC3_TYPE(0.702923, 0.702923, 0.0),
		VEC3_TYPE(0.702923, 0.297077, 0.0),
		VEC3_TYPE(0.702923, 0.870766, 0.0),
		VEC3_TYPE(0.702923, 0.129234, 0.0),
		VEC3_TYPE(0.702923, 0.974554, 0.0),
		VEC3_TYPE(0.702923, 0.0254461, 0.0),
		VEC3_TYPE(0.297077, 0.5, 0.0),
		VEC3_TYPE(0.297077, 0.702923, 0.0),
		VEC3_TYPE(0.297077, 0.297077, 0.0),
		VEC3_TYPE(0.297077, 0.870766, 0.0),
		VEC3_TYPE(0.297077, 0.129234, 0.0),
		VEC3_TYPE(0.297077, 0.974554, 0.0),
		VEC3_TYPE(0.297077, 0.0254461, 0.0),
		VEC3_TYPE(0.870766, 0.5, 0.0),
		VEC3_TYPE(0.870766, 0.702923, 0.0),
		VEC3_TYPE(0.870766, 0.297077, 0.0),
		VEC3_TYPE(0.870766, 0.870766, 0.0),
		VEC3_TYPE(0.870766, 0.129234, 0.0),
		VEC3_TYPE(0.870766, 0.974554, 0.0),
		VEC3_TYPE(0.870766, 0.0254461, 0.0),
		VEC3_TYPE(0.129234, 0.5, 0.0),
		VEC3_TYPE(0.129234, 0.702923, 0.0),
		VEC3_TYPE(0.129234, 0.297077, 0.0),
		VEC3_TYPE(0.129234, 0.870766, 0.0),
		VEC3_TYPE(0.129234, 0.129234, 0.0),
		VEC3_TYPE(0.129234, 0.974554, 0.0),
		VEC3_TYPE(0.129234, 0.0254461, 0.0),
		VEC3_TYPE(0.974554, 0.5, 0.0),
		VEC3_TYPE(0.974554, 0.702923, 0.0),
		VEC3_TYPE(0.974554, 0.297077, 0.0),
		VEC3_TYPE(0.974554, 0.870766, 0.0),
		VEC3_TYPE(0.974554, 0.129234, 0.0),
		VEC3_TYPE(0.974554, 0.974554, 0.0),
		VEC3_TYPE(0.974554, 0.0254461, 0.0),
		VEC3_TYPE(0.0254461, 0.5, 0.0),
		VEC3_TYPE(0.0254461, 0.702923, 0.0),
		VEC3_TYPE(0.0254461, 0.297077, 0.0),
		VEC3_TYPE(0.0254461, 0.870766, 0.0),
		VEC3_TYPE(0.0254461, 0.129234, 0.0),
		VEC3_TYPE(0.0254461, 0.974554, 0.0),
		VEC3_TYPE(0.0254461, 0.0254461, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_2D::quadtarure_weights_2D_49point = std::vector<MY_FLOAT_TYPE>{
		0.0436725,
		0.0398973,
		0.0398973,
		0.0292264,
		0.0292264,
		0.0135299,
		0.0135299,
		0.0398973,
		0.0364485,
		0.0364485,
		0.0267,
		0.0267,
		0.0123603,
		0.0123603,
		0.0398973,
		0.0364485,
		0.0364485,
		0.0267,
		0.0267,
		0.0123603,
		0.0123603,
		0.0292264,
		0.0267,
		0.0267,
		0.0195588,
		0.0195588,
		0.00905441,
		0.00905441,
		0.0292264,
		0.0267,
		0.0267,
		0.0195588,
		0.0195588,
		0.00905441,
		0.00905441,
		0.0135299,
		0.0123603,
		0.0123603,
		0.00905441,
		0.00905441,
		0.00419159,
		0.00419159,
		0.0135299,
		0.0123603,
		0.0123603,
		0.00905441,
		0.00905441,
		0.00419159,
		0.00419159
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_2D::quadtarure_positions_2D_64point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.591717, 0.591717, 0.0),
		VEC3_TYPE(0.591717, 0.408283, 0.0),
		VEC3_TYPE(0.591717, 0.762766, 0.0),
		VEC3_TYPE(0.591717, 0.237234, 0.0),
		VEC3_TYPE(0.591717, 0.898333, 0.0),
		VEC3_TYPE(0.591717, 0.101667, 0.0),
		VEC3_TYPE(0.591717, 0.980145, 0.0),
		VEC3_TYPE(0.591717, 0.0198551, 0.0),
		VEC3_TYPE(0.408283, 0.591717, 0.0),
		VEC3_TYPE(0.408283, 0.408283, 0.0),
		VEC3_TYPE(0.408283, 0.762766, 0.0),
		VEC3_TYPE(0.408283, 0.237234, 0.0),
		VEC3_TYPE(0.408283, 0.898333, 0.0),
		VEC3_TYPE(0.408283, 0.101667, 0.0),
		VEC3_TYPE(0.408283, 0.980145, 0.0),
		VEC3_TYPE(0.408283, 0.0198551, 0.0),
		VEC3_TYPE(0.762766, 0.591717, 0.0),
		VEC3_TYPE(0.762766, 0.408283, 0.0),
		VEC3_TYPE(0.762766, 0.762766, 0.0),
		VEC3_TYPE(0.762766, 0.237234, 0.0),
		VEC3_TYPE(0.762766, 0.898333, 0.0),
		VEC3_TYPE(0.762766, 0.101667, 0.0),
		VEC3_TYPE(0.762766, 0.980145, 0.0),
		VEC3_TYPE(0.762766, 0.0198551, 0.0),
		VEC3_TYPE(0.237234, 0.591717, 0.0),
		VEC3_TYPE(0.237234, 0.408283, 0.0),
		VEC3_TYPE(0.237234, 0.762766, 0.0),
		VEC3_TYPE(0.237234, 0.237234, 0.0),
		VEC3_TYPE(0.237234, 0.898333, 0.0),
		VEC3_TYPE(0.237234, 0.101667, 0.0),
		VEC3_TYPE(0.237234, 0.980145, 0.0),
		VEC3_TYPE(0.237234, 0.0198551, 0.0),
		VEC3_TYPE(0.898333, 0.591717, 0.0),
		VEC3_TYPE(0.898333, 0.408283, 0.0),
		VEC3_TYPE(0.898333, 0.762766, 0.0),
		VEC3_TYPE(0.898333, 0.237234, 0.0),
		VEC3_TYPE(0.898333, 0.898333, 0.0),
		VEC3_TYPE(0.898333, 0.101667, 0.0),
		VEC3_TYPE(0.898333, 0.980145, 0.0),
		VEC3_TYPE(0.898333, 0.0198551, 0.0),
		VEC3_TYPE(0.101667, 0.591717, 0.0),
		VEC3_TYPE(0.101667, 0.408283, 0.0),
		VEC3_TYPE(0.101667, 0.762766, 0.0),
		VEC3_TYPE(0.101667, 0.237234, 0.0),
		VEC3_TYPE(0.101667, 0.898333, 0.0),
		VEC3_TYPE(0.101667, 0.101667, 0.0),
		VEC3_TYPE(0.101667, 0.980145, 0.0),
		VEC3_TYPE(0.101667, 0.0198551, 0.0),
		VEC3_TYPE(0.980145, 0.591717, 0.0),
		VEC3_TYPE(0.980145, 0.408283, 0.0),
		VEC3_TYPE(0.980145, 0.762766, 0.0),
		VEC3_TYPE(0.980145, 0.237234, 0.0),
		VEC3_TYPE(0.980145, 0.898333, 0.0),
		VEC3_TYPE(0.980145, 0.101667, 0.0),
		VEC3_TYPE(0.980145, 0.980145, 0.0),
		VEC3_TYPE(0.980145, 0.0198551, 0.0),
		VEC3_TYPE(0.0198551, 0.591717, 0.0),
		VEC3_TYPE(0.0198551, 0.408283, 0.0),
		VEC3_TYPE(0.0198551, 0.762766, 0.0),
		VEC3_TYPE(0.0198551, 0.237234, 0.0),
		VEC3_TYPE(0.0198551, 0.898333, 0.0),
		VEC3_TYPE(0.0198551, 0.101667, 0.0),
		VEC3_TYPE(0.0198551, 0.980145, 0.0),
		VEC3_TYPE(0.0198551, 0.0198551, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_2D::quadtarure_weights_2D_64point = std::vector<MY_FLOAT_TYPE>{
		0.0328849,
		0.0328849,
		0.0284441,
		0.0284441,
		0.0201635,
		0.0201635,
		0.00917849,
		0.00917849,
		0.0328849,
		0.0328849,
		0.0284441,
		0.0284441,
		0.0201635,
		0.0201635,
		0.00917849,
		0.00917849,
		0.0284441,
		0.0284441,
		0.024603,
		0.024603,
		0.0174406,
		0.0174406,
		0.00793902,
		0.00793902,
		0.0284441,
		0.0284441,
		0.024603,
		0.024603,
		0.0174406,
		0.0174406,
		0.00793902,
		0.00793902,
		0.0201635,
		0.0201635,
		0.0174406,
		0.0174406,
		0.0123633,
		0.0123633,
		0.00562783,
		0.00562783,
		0.0201635,
		0.0201635,
		0.0174406,
		0.0174406,
		0.0123633,
		0.0123633,
		0.00562783,
		0.00562783,
		0.00917849,
		0.00917849,
		0.00793902,
		0.00793902,
		0.00562783,
		0.00562783,
		0.0025618,
		0.0025618,
		0.00917849,
		0.00917849,
		0.00793902,
		0.00793902,
		0.00562783,
		0.00562783,
		0.0025618,
		0.0025618
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_2D::quadtarure_positions_2D_81point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.5, 0.5, 0.0),
		VEC3_TYPE(0.5, 0.918016, 0.0),
		VEC3_TYPE(0.5, 0.0819845, 0.0),
		VEC3_TYPE(0.5, 0.98408, 0.0),
		VEC3_TYPE(0.5, 0.0159199, 0.0),
		VEC3_TYPE(0.5, 0.662127, 0.0),
		VEC3_TYPE(0.5, 0.337873, 0.0),
		VEC3_TYPE(0.5, 0.806686, 0.0),
		VEC3_TYPE(0.5, 0.193314, 0.0),
		VEC3_TYPE(0.918016, 0.5, 0.0),
		VEC3_TYPE(0.918016, 0.918016, 0.0),
		VEC3_TYPE(0.918016, 0.0819845, 0.0),
		VEC3_TYPE(0.918016, 0.98408, 0.0),
		VEC3_TYPE(0.918016, 0.0159199, 0.0),
		VEC3_TYPE(0.918016, 0.662127, 0.0),
		VEC3_TYPE(0.918016, 0.337873, 0.0),
		VEC3_TYPE(0.918016, 0.806686, 0.0),
		VEC3_TYPE(0.918016, 0.193314, 0.0),
		VEC3_TYPE(0.0819845, 0.5, 0.0),
		VEC3_TYPE(0.0819845, 0.918016, 0.0),
		VEC3_TYPE(0.0819845, 0.0819845, 0.0),
		VEC3_TYPE(0.0819845, 0.98408, 0.0),
		VEC3_TYPE(0.0819845, 0.0159199, 0.0),
		VEC3_TYPE(0.0819845, 0.662127, 0.0),
		VEC3_TYPE(0.0819845, 0.337873, 0.0),
		VEC3_TYPE(0.0819845, 0.806686, 0.0),
		VEC3_TYPE(0.0819845, 0.193314, 0.0),
		VEC3_TYPE(0.98408, 0.5, 0.0),
		VEC3_TYPE(0.98408, 0.918016, 0.0),
		VEC3_TYPE(0.98408, 0.0819845, 0.0),
		VEC3_TYPE(0.98408, 0.98408, 0.0),
		VEC3_TYPE(0.98408, 0.0159199, 0.0),
		VEC3_TYPE(0.98408, 0.662127, 0.0),
		VEC3_TYPE(0.98408, 0.337873, 0.0),
		VEC3_TYPE(0.98408, 0.806686, 0.0),
		VEC3_TYPE(0.98408, 0.193314, 0.0),
		VEC3_TYPE(0.0159199, 0.5, 0.0),
		VEC3_TYPE(0.0159199, 0.918016, 0.0),
		VEC3_TYPE(0.0159199, 0.0819845, 0.0),
		VEC3_TYPE(0.0159199, 0.98408, 0.0),
		VEC3_TYPE(0.0159199, 0.0159199, 0.0),
		VEC3_TYPE(0.0159199, 0.662127, 0.0),
		VEC3_TYPE(0.0159199, 0.337873, 0.0),
		VEC3_TYPE(0.0159199, 0.806686, 0.0),
		VEC3_TYPE(0.0159199, 0.193314, 0.0),
		VEC3_TYPE(0.662127, 0.5, 0.0),
		VEC3_TYPE(0.662127, 0.918016, 0.0),
		VEC3_TYPE(0.662127, 0.0819845, 0.0),
		VEC3_TYPE(0.662127, 0.98408, 0.0),
		VEC3_TYPE(0.662127, 0.0159199, 0.0),
		VEC3_TYPE(0.662127, 0.662127, 0.0),
		VEC3_TYPE(0.662127, 0.337873, 0.0),
		VEC3_TYPE(0.662127, 0.806686, 0.0),
		VEC3_TYPE(0.662127, 0.193314, 0.0),
		VEC3_TYPE(0.337873, 0.5, 0.0),
		VEC3_TYPE(0.337873, 0.918016, 0.0),
		VEC3_TYPE(0.337873, 0.0819845, 0.0),
		VEC3_TYPE(0.337873, 0.98408, 0.0),
		VEC3_TYPE(0.337873, 0.0159199, 0.0),
		VEC3_TYPE(0.337873, 0.662127, 0.0),
		VEC3_TYPE(0.337873, 0.337873, 0.0),
		VEC3_TYPE(0.337873, 0.806686, 0.0),
		VEC3_TYPE(0.337873, 0.193314, 0.0),
		VEC3_TYPE(0.806686, 0.5, 0.0),
		VEC3_TYPE(0.806686, 0.918016, 0.0),
		VEC3_TYPE(0.806686, 0.0819845, 0.0),
		VEC3_TYPE(0.806686, 0.98408, 0.0),
		VEC3_TYPE(0.806686, 0.0159199, 0.0),
		VEC3_TYPE(0.806686, 0.662127, 0.0),
		VEC3_TYPE(0.806686, 0.337873, 0.0),
		VEC3_TYPE(0.806686, 0.806686, 0.0),
		VEC3_TYPE(0.806686, 0.193314, 0.0),
		VEC3_TYPE(0.193314, 0.5, 0.0),
		VEC3_TYPE(0.193314, 0.918016, 0.0),
		VEC3_TYPE(0.193314, 0.0819845, 0.0),
		VEC3_TYPE(0.193314, 0.98408, 0.0),
		VEC3_TYPE(0.193314, 0.0159199, 0.0),
		VEC3_TYPE(0.193314, 0.662127, 0.0),
		VEC3_TYPE(0.193314, 0.337873, 0.0),
		VEC3_TYPE(0.193314, 0.806686, 0.0),
		VEC3_TYPE(0.193314, 0.193314, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_2D::quadtarure_weights_2D_81point = std::vector<MY_FLOAT_TYPE>{
		0.0272645,
		0.0149143,
		0.0149143,
		0.00671,
		0.00671,
		0.0257873,
		0.0257873,
		0.021516,
		0.021516,
		0.0149143,
		0.00815844,
		0.00815844,
		0.00367052,
		0.00367052,
		0.0141062,
		0.0141062,
		0.0117697,
		0.0117697,
		0.0149143,
		0.00815844,
		0.00815844,
		0.00367052,
		0.00367052,
		0.0141062,
		0.0141062,
		0.0117697,
		0.0117697,
		0.00671,
		0.00367052,
		0.00367052,
		0.00165138,
		0.00165138,
		0.00634645,
		0.00634645,
		0.00529524,
		0.00529524,
		0.00671,
		0.00367052,
		0.00367052,
		0.00165138,
		0.00165138,
		0.00634645,
		0.00634645,
		0.00529524,
		0.00529524,
		0.0257873,
		0.0141062,
		0.0141062,
		0.00634645,
		0.00634645,
		0.0243902,
		0.0243902,
		0.0203502,
		0.0203502,
		0.0257873,
		0.0141062,
		0.0141062,
		0.00634645,
		0.00634645,
		0.0243902,
		0.0243902,
		0.0203502,
		0.0203502,
		0.021516,
		0.0117697,
		0.0117697,
		0.00529524,
		0.00529524,
		0.0203502,
		0.0203502,
		0.0169795,
		0.0169795,
		0.021516,
		0.0117697,
		0.0117697,
		0.00529524,
		0.00529524,
		0.0203502,
		0.0203502,
		0.0169795,
		0.0169795
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_2D::quadtarure_positions_2D_100point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.574437, 0.574437, 0.0),
		VEC3_TYPE(0.574437, 0.425563, 0.0),
		VEC3_TYPE(0.574437, 0.716698, 0.0),
		VEC3_TYPE(0.574437, 0.283302, 0.0),
		VEC3_TYPE(0.574437, 0.839705, 0.0),
		VEC3_TYPE(0.574437, 0.160295, 0.0),
		VEC3_TYPE(0.574437, 0.932532, 0.0),
		VEC3_TYPE(0.574437, 0.0674683, 0.0),
		VEC3_TYPE(0.574437, 0.986953, 0.0),
		VEC3_TYPE(0.574437, 0.0130467, 0.0),
		VEC3_TYPE(0.425563, 0.574437, 0.0),
		VEC3_TYPE(0.425563, 0.425563, 0.0),
		VEC3_TYPE(0.425563, 0.716698, 0.0),
		VEC3_TYPE(0.425563, 0.283302, 0.0),
		VEC3_TYPE(0.425563, 0.839705, 0.0),
		VEC3_TYPE(0.425563, 0.160295, 0.0),
		VEC3_TYPE(0.425563, 0.932532, 0.0),
		VEC3_TYPE(0.425563, 0.0674683, 0.0),
		VEC3_TYPE(0.425563, 0.986953, 0.0),
		VEC3_TYPE(0.425563, 0.0130467, 0.0),
		VEC3_TYPE(0.716698, 0.574437, 0.0),
		VEC3_TYPE(0.716698, 0.425563, 0.0),
		VEC3_TYPE(0.716698, 0.716698, 0.0),
		VEC3_TYPE(0.716698, 0.283302, 0.0),
		VEC3_TYPE(0.716698, 0.839705, 0.0),
		VEC3_TYPE(0.716698, 0.160295, 0.0),
		VEC3_TYPE(0.716698, 0.932532, 0.0),
		VEC3_TYPE(0.716698, 0.0674683, 0.0),
		VEC3_TYPE(0.716698, 0.986953, 0.0),
		VEC3_TYPE(0.716698, 0.0130467, 0.0),
		VEC3_TYPE(0.283302, 0.574437, 0.0),
		VEC3_TYPE(0.283302, 0.425563, 0.0),
		VEC3_TYPE(0.283302, 0.716698, 0.0),
		VEC3_TYPE(0.283302, 0.283302, 0.0),
		VEC3_TYPE(0.283302, 0.839705, 0.0),
		VEC3_TYPE(0.283302, 0.160295, 0.0),
		VEC3_TYPE(0.283302, 0.932532, 0.0),
		VEC3_TYPE(0.283302, 0.0674683, 0.0),
		VEC3_TYPE(0.283302, 0.986953, 0.0),
		VEC3_TYPE(0.283302, 0.0130467, 0.0),
		VEC3_TYPE(0.839705, 0.574437, 0.0),
		VEC3_TYPE(0.839705, 0.425563, 0.0),
		VEC3_TYPE(0.839705, 0.716698, 0.0),
		VEC3_TYPE(0.839705, 0.283302, 0.0),
		VEC3_TYPE(0.839705, 0.839705, 0.0),
		VEC3_TYPE(0.839705, 0.160295, 0.0),
		VEC3_TYPE(0.839705, 0.932532, 0.0),
		VEC3_TYPE(0.839705, 0.0674683, 0.0),
		VEC3_TYPE(0.839705, 0.986953, 0.0),
		VEC3_TYPE(0.839705, 0.0130467, 0.0),
		VEC3_TYPE(0.160295, 0.574437, 0.0),
		VEC3_TYPE(0.160295, 0.425563, 0.0),
		VEC3_TYPE(0.160295, 0.716698, 0.0),
		VEC3_TYPE(0.160295, 0.283302, 0.0),
		VEC3_TYPE(0.160295, 0.839705, 0.0),
		VEC3_TYPE(0.160295, 0.160295, 0.0),
		VEC3_TYPE(0.160295, 0.932532, 0.0),
		VEC3_TYPE(0.160295, 0.0674683, 0.0),
		VEC3_TYPE(0.160295, 0.986953, 0.0),
		VEC3_TYPE(0.160295, 0.0130467, 0.0),
		VEC3_TYPE(0.932532, 0.574437, 0.0),
		VEC3_TYPE(0.932532, 0.425563, 0.0),
		VEC3_TYPE(0.932532, 0.716698, 0.0),
		VEC3_TYPE(0.932532, 0.283302, 0.0),
		VEC3_TYPE(0.932532, 0.839705, 0.0),
		VEC3_TYPE(0.932532, 0.160295, 0.0),
		VEC3_TYPE(0.932532, 0.932532, 0.0),
		VEC3_TYPE(0.932532, 0.0674683, 0.0),
		VEC3_TYPE(0.932532, 0.986953, 0.0),
		VEC3_TYPE(0.932532, 0.0130467, 0.0),
		VEC3_TYPE(0.0674683, 0.574437, 0.0),
		VEC3_TYPE(0.0674683, 0.425563, 0.0),
		VEC3_TYPE(0.0674683, 0.716698, 0.0),
		VEC3_TYPE(0.0674683, 0.283302, 0.0),
		VEC3_TYPE(0.0674683, 0.839705, 0.0),
		VEC3_TYPE(0.0674683, 0.160295, 0.0),
		VEC3_TYPE(0.0674683, 0.932532, 0.0),
		VEC3_TYPE(0.0674683, 0.0674683, 0.0),
		VEC3_TYPE(0.0674683, 0.986953, 0.0),
		VEC3_TYPE(0.0674683, 0.0130467, 0.0),
		VEC3_TYPE(0.986953, 0.574437, 0.0),
		VEC3_TYPE(0.986953, 0.425563, 0.0),
		VEC3_TYPE(0.986953, 0.716698, 0.0),
		VEC3_TYPE(0.986953, 0.283302, 0.0),
		VEC3_TYPE(0.986953, 0.839705, 0.0),
		VEC3_TYPE(0.986953, 0.160295, 0.0),
		VEC3_TYPE(0.986953, 0.932532, 0.0),
		VEC3_TYPE(0.986953, 0.0674683, 0.0),
		VEC3_TYPE(0.986953, 0.986953, 0.0),
		VEC3_TYPE(0.986953, 0.0130467, 0.0),
		VEC3_TYPE(0.0130467, 0.574437, 0.0),
		VEC3_TYPE(0.0130467, 0.425563, 0.0),
		VEC3_TYPE(0.0130467, 0.716698, 0.0),
		VEC3_TYPE(0.0130467, 0.283302, 0.0),
		VEC3_TYPE(0.0130467, 0.839705, 0.0),
		VEC3_TYPE(0.0130467, 0.160295, 0.0),
		VEC3_TYPE(0.0130467, 0.932532, 0.0),
		VEC3_TYPE(0.0130467, 0.0674683, 0.0),
		VEC3_TYPE(0.0130467, 0.986953, 0.0),
		VEC3_TYPE(0.0130467, 0.0130467, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_2D::quadtarure_weights_2D_100point = std::vector<MY_FLOAT_TYPE>{
		0.0218336,
		0.0218336,
		0.0198937,
		0.0198937,
		0.0161863,
		0.0161863,
		0.0110416,
		0.0110416,
		0.00492575,
		0.00492575,
		0.0218336,
		0.0218336,
		0.0198937,
		0.0198937,
		0.0161863,
		0.0161863,
		0.0110416,
		0.0110416,
		0.00492575,
		0.00492575,
		0.0198937,
		0.0198937,
		0.0181261,
		0.0181261,
		0.0147482,                                                                                                                                                                                                                                                                                                                                                                         0.0147482,
		0.0100606,
		0.0100606,
		0.00448809,
		0.00448809,
		0.0198937,
		0.0198937,
		0.0181261,
		0.0181261,
		0.0147482,
		0.0147482,
		0.0100606,
		0.0100606,
		0.00448809,
		0.00448809,
		0.0161863,
		0.0161863,
		0.0147482,
		0.0147482,
		0.0119997,
		0.0119997,
		0.00818569,
		0.00818569,
		0.0036517,
		0.0036517,
		0.0161863,
		0.0161863,
		0.0147482,
		0.0147482,
		0.0119997,
		0.0119997,
		0.00818569,
		0.00818569,
		0.0036517,
		0.0036517,
		0.0110416,
		0.0110416,
		0.0100606,
		0.0100606,
		0.00818569,
		0.00818569,
		0.00558393,
		0.00558393,
		0.00249103,
		0.00249103,
		0.0110416,
		0.0110416,
		0.0100606,
		0.0100606,
		0.00818569,
		0.00818569,
		0.00558393,
		0.00558393,
		0.00249103,
		0.00249103,
		0.00492575,
		0.00492575,
		0.00448809,
		0.00448809,
		0.0036517,
		0.0036517,
		0.00249103,
		0.00249103,
		0.00111127,
		0.00111127,
		0.00492575,
		0.00492575,
		0.00448809,
		0.00448809,
		0.0036517,
		0.0036517,
		0.00249103,
		0.00249103,
		0.00111127,
		0.00111127
	};
	const std::vector<VEC3_TYPE> gauss_quadrature_points_2D::quadtarure_positions_2D_121point = std::vector<VEC3_TYPE>{
		VEC3_TYPE(0.5, 0.5, 0.0),
		VEC3_TYPE(0.5, 0.634772, 0.0),
		VEC3_TYPE(0.5, 0.365228, 0.0),
		VEC3_TYPE(0.5, 0.759548, 0.0),
		VEC3_TYPE(0.5, 0.240452, 0.0),
		VEC3_TYPE(0.5, 0.865076, 0.0),
		VEC3_TYPE(0.5, 0.134924, 0.0),
		VEC3_TYPE(0.5, 0.943531, 0.0),
		VEC3_TYPE(0.5, 0.0564687, 0.0),
		VEC3_TYPE(0.5, 0.989114, 0.0),
		VEC3_TYPE(0.5, 0.0108857, 0.0),
		VEC3_TYPE(0.634772, 0.5, 0.0),
		VEC3_TYPE(0.634772, 0.634772, 0.0),
		VEC3_TYPE(0.634772, 0.365228, 0.0),
		VEC3_TYPE(0.634772, 0.759548, 0.0),
		VEC3_TYPE(0.634772, 0.240452, 0.0),
		VEC3_TYPE(0.634772, 0.865076, 0.0),
		VEC3_TYPE(0.634772, 0.134924, 0.0),
		VEC3_TYPE(0.634772, 0.943531, 0.0),
		VEC3_TYPE(0.634772, 0.0564687, 0.0),
		VEC3_TYPE(0.634772, 0.989114, 0.0),
		VEC3_TYPE(0.634772, 0.0108857, 0.0),
		VEC3_TYPE(0.365228, 0.5, 0.0),
		VEC3_TYPE(0.365228, 0.634772, 0.0),
		VEC3_TYPE(0.365228, 0.365228, 0.0),
		VEC3_TYPE(0.365228, 0.759548, 0.0),
		VEC3_TYPE(0.365228, 0.240452, 0.0),
		VEC3_TYPE(0.365228, 0.865076, 0.0),
		VEC3_TYPE(0.365228, 0.134924, 0.0),
		VEC3_TYPE(0.365228, 0.943531, 0.0),
		VEC3_TYPE(0.365228, 0.0564687, 0.0),
		VEC3_TYPE(0.365228, 0.989114, 0.0),
		VEC3_TYPE(0.365228, 0.0108857, 0.0),
		VEC3_TYPE(0.759548, 0.5, 0.0),
		VEC3_TYPE(0.759548, 0.634772, 0.0),
		VEC3_TYPE(0.759548, 0.365228, 0.0),
		VEC3_TYPE(0.759548, 0.759548, 0.0),
		VEC3_TYPE(0.759548, 0.240452, 0.0),
		VEC3_TYPE(0.759548, 0.865076, 0.0),
		VEC3_TYPE(0.759548, 0.134924, 0.0),
		VEC3_TYPE(0.759548, 0.943531, 0.0),
		VEC3_TYPE(0.759548, 0.0564687, 0.0),
		VEC3_TYPE(0.759548, 0.989114, 0.0),
		VEC3_TYPE(0.759548, 0.0108857, 0.0),
		VEC3_TYPE(0.240452, 0.5, 0.0),
		VEC3_TYPE(0.240452, 0.634772, 0.0),
		VEC3_TYPE(0.240452, 0.365228, 0.0),
		VEC3_TYPE(0.240452, 0.759548, 0.0),
		VEC3_TYPE(0.240452, 0.240452, 0.0),
		VEC3_TYPE(0.240452, 0.865076, 0.0),
		VEC3_TYPE(0.240452, 0.134924, 0.0),
		VEC3_TYPE(0.240452, 0.943531, 0.0),
		VEC3_TYPE(0.240452, 0.0564687, 0.0),
		VEC3_TYPE(0.240452, 0.989114, 0.0),
		VEC3_TYPE(0.240452, 0.0108857, 0.0),
		VEC3_TYPE(0.865076, 0.5, 0.0),
		VEC3_TYPE(0.865076, 0.634772, 0.0),
		VEC3_TYPE(0.865076, 0.365228, 0.0),
		VEC3_TYPE(0.865076, 0.759548, 0.0),
		VEC3_TYPE(0.865076, 0.240452, 0.0),
		VEC3_TYPE(0.865076, 0.865076, 0.0),
		VEC3_TYPE(0.865076, 0.134924, 0.0),
		VEC3_TYPE(0.865076, 0.943531, 0.0),
		VEC3_TYPE(0.865076, 0.0564687, 0.0),
		VEC3_TYPE(0.865076, 0.989114, 0.0),
		VEC3_TYPE(0.865076, 0.0108857, 0.0),
		VEC3_TYPE(0.134924, 0.5, 0.0),
		VEC3_TYPE(0.134924, 0.634772, 0.0),
		VEC3_TYPE(0.134924, 0.365228, 0.0),
		VEC3_TYPE(0.134924, 0.759548, 0.0),
		VEC3_TYPE(0.134924, 0.240452, 0.0),
		VEC3_TYPE(0.134924, 0.865076, 0.0),
		VEC3_TYPE(0.134924, 0.134924, 0.0),
		VEC3_TYPE(0.134924, 0.943531, 0.0),
		VEC3_TYPE(0.134924, 0.0564687, 0.0),
		VEC3_TYPE(0.134924, 0.989114, 0.0),
		VEC3_TYPE(0.134924, 0.0108857, 0.0),
		VEC3_TYPE(0.943531, 0.5, 0.0),
		VEC3_TYPE(0.943531, 0.634772, 0.0),
		VEC3_TYPE(0.943531, 0.365228, 0.0),
		VEC3_TYPE(0.943531, 0.759548, 0.0),
		VEC3_TYPE(0.943531, 0.240452, 0.0),
		VEC3_TYPE(0.943531, 0.865076, 0.0),
		VEC3_TYPE(0.943531, 0.134924, 0.0),
		VEC3_TYPE(0.943531, 0.943531, 0.0),
		VEC3_TYPE(0.943531, 0.0564687, 0.0),
		VEC3_TYPE(0.943531, 0.989114, 0.0),
		VEC3_TYPE(0.943531, 0.0108857, 0.0),
		VEC3_TYPE(0.0564687, 0.5, 0.0),
		VEC3_TYPE(0.0564687, 0.634772, 0.0),
		VEC3_TYPE(0.0564687, 0.365228, 0.0),
		VEC3_TYPE(0.0564687, 0.759548, 0.0),
		VEC3_TYPE(0.0564687, 0.240452, 0.0),
		VEC3_TYPE(0.0564687, 0.865076, 0.0),
		VEC3_TYPE(0.0564687, 0.134924, 0.0),
		VEC3_TYPE(0.0564687, 0.943531, 0.0),
		VEC3_TYPE(0.0564687, 0.0564687, 0.0),
		VEC3_TYPE(0.0564687, 0.989114, 0.0),
		VEC3_TYPE(0.0564687, 0.0108857, 0.0),
		VEC3_TYPE(0.989114, 0.5, 0.0),
		VEC3_TYPE(0.989114, 0.634772, 0.0),
		VEC3_TYPE(0.989114, 0.365228, 0.0),
		VEC3_TYPE(0.989114, 0.759548, 0.0),
		VEC3_TYPE(0.989114, 0.240452, 0.0),
		VEC3_TYPE(0.989114, 0.865076, 0.0),
		VEC3_TYPE(0.989114, 0.134924, 0.0),
		VEC3_TYPE(0.989114, 0.943531, 0.0),
		VEC3_TYPE(0.989114, 0.0564687, 0.0),
		VEC3_TYPE(0.989114, 0.989114, 0.0),
		VEC3_TYPE(0.989114, 0.0108857, 0.0),
		VEC3_TYPE(0.0108857, 0.5, 0.0),
		VEC3_TYPE(0.0108857, 0.634772, 0.0),
		VEC3_TYPE(0.0108857, 0.365228, 0.0),
		VEC3_TYPE(0.0108857, 0.759548, 0.0),
		VEC3_TYPE(0.0108857, 0.240452, 0.0),
		VEC3_TYPE(0.0108857, 0.865076, 0.0),
		VEC3_TYPE(0.0108857, 0.134924, 0.0),
		VEC3_TYPE(0.0108857, 0.943531, 0.0),
		VEC3_TYPE(0.0108857, 0.0564687, 0.0),
		VEC3_TYPE(0.0108857, 0.989114, 0.0),
		VEC3_TYPE(0.0108857, 0.0108857, 0.0)
	};
	const std::vector<MY_FLOAT_TYPE> gauss_quadrature_points_2D::quadtarure_weights_2D_121point = std::vector<MY_FLOAT_TYPE>{
		0.018622,
		0.0179315,
		0.0179315,
		0.0159111,                                                                                                                                                                                                                                                                                                                                                                         0.0159111,
		0.0127108,
		0.0127108,
		0.00856851,
		0.00856851,
		0.00379834,
		0.00379834,
		0.0179315,
		0.0172666,
		0.0172666,
		0.0153211,
		0.0153211,
		0.0122395,
		0.0122395,
		0.00825077,
		0.00825077,
		0.00365749,
		0.00365749,
		0.0179315,
		0.0172666,
		0.0172666,
		0.0153211,
		0.0153211,
		0.0122395,
		0.0122395,
		0.00825077,
		0.00825077,
		0.00365749,
		0.00365749,
		0.0159111,
		0.0153211,
		0.0153211,
		0.0135948,
		0.0135948,
		0.0108604,
		0.0108604,
		0.00732114,
		0.00732114,
		0.00324539,
		0.00324539,
		0.0159111,
		0.0153211,
		0.0153211,
		0.0135948,
		0.0135948,
		0.0108604,
		0.0108604,
		0.00732114,
		0.00732114,
		0.00324539,
		0.00324539,
		0.0127108,
		0.0122395,
		0.0122395,
		0.0108604,
		0.0108604,
		0.00867601,
		0.00867601,
		0.0058486,
		0.0058486,
		0.00259263,
		0.00259263,
		0.0127108,
		0.0122395,
		0.0122395,
		0.0108604,
		0.0108604,
		0.00867601,
		0.00867601,
		0.0058486,
		0.0058486,
		0.00259263,
		0.00259263,
		0.00856851,
		0.00825077,
		0.00825077,
		0.00732114,
		0.00732114,
		0.0058486,
		0.0058486,
		0.00394261,
		0.00394261,
		0.00174772,
		0.00174772,
		0.00856851,
		0.00825077,
		0.00825077,
		0.00732114,
		0.00732114,
		0.0058486,
		0.0058486,
		0.00394261,
		0.00394261,
		0.00174772,
		0.00174772,
		0.00379834,
		0.00365749,
		0.00365749,
		0.00324539,
		0.00324539,
		0.00259263,
		0.00259263,
		0.00174772,
		0.00174772,
		0.000774747,
		0.000774747,
		0.00379834,
		0.00365749,
		0.00365749,
		0.00324539,
		0.00324539,
		0.00259263,
		0.00259263,
		0.00174772,
		0.00174772,
		0.000774747,
		0.000774747
	};


}// namespace smoke_simulation
